// 简答题一，请说出下列代码最终的执行结果，并解释为什么
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6]()
// 代码执行输出 10，因为在 for 循环语句中用 var 声明的语句其实会在外层作用域，当循环执行完后，i 的值会变成 10，这样在执行 a 数组里的函数的事，打印的 i 就是 10

// 简答题二，请说出下列代码最终的执行结果，并解释为什么
var tmp = 123
if(true) {
  console.log(tmp)
  let tmp
}
// 最终输出 ReferenceError，在 if 的代码里使用了 let，这里就变成了块作用域，这样就有了暂时性死区，不能在变量声明前使用变量

// 简答题三，结合 ES6 新语法，用最简单的方式找出数组中的最小值
var arr = [12, 34, 32, 89, 4]
// Math.min(...arr);

// 四，请详细说明 var，let，const 三种声明变量的方式之间的具体差别
// var 的作用域有全局和函数作用域，变量可以重新声明和赋值，有变量提升的问题
// let 声明块作用域的变量，可以选择是否给与初始值，不能先使用再声明，const 是在 let 的基础上，多了必需要有初始值且后续值不能改变的限制

// 五，请说出下列代码最终的执行结果，并解释为什么
var a = 10
var obj ={
  a:20,
  fn() {
    setTimeout(()=> {
      console.log(this.a)
    })
  }
}
obj.fn()
// 输出 20，箭头函数没有自身的 this，在调用的时候就是指向 fn 的 this，这里的 fn 是由 obj 调用的，所以 this 指向了 obj，最后结果就是20

// 六，简述 Symbol 类型的用途
// Symbol 是 ES2015 引入的一种全新的基础数据类型，用来表示独一无二的值，

// 七，说说什么是浅拷贝，什么是深拷贝
// 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。
// 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。

// 八，请简述 Typescript 与 JavaScript 之间的关系
// TS 是 JS 的超集，TS 多了一套类型系统，并支持 ECMAScript 的新特性，任何一种 JavaScript 运行环境都支持用 Typescript 去开发

// 九，请谈谈你搜认为的 Typescript 优缺点
// Typescript 优点是可以使错误更早暴露，代码更加智能，编码更准确，重构更牢靠，还能减少不必要的 类型判断，缺点是比 JS 学习成本更大，小项目不适合

// 十，描述引用计数的工作原理和优缺点
// 在创建对象时和对指针进行更新时同时更新完成引用计数器的更新
// 优点：1.可即刻回收垃圾 2.最大限度减少程序暂停 
// 缺点：1.无法回收循环引用对象 2.时间开销大 3.计数器需要占用很多空间

// 十一，描述标记整理算法的工作原理
// 标记整理算法，在标记阶段就是先从根去查找可达对象，如果有嵌套的对象，就递归查找，然后标记对象。接着在清除之前先整理，把不活动的内存空间整理成一段连续的空间，在清除阶段就是，清除回收没有标记的对象，同时清除所有标记

// 十二，描述 V8 中新生代存储区垃圾回收流程
// 回收过程采用复制算法 + 标记整理
// 新生代内存区分为二个等大小空间
// 使用空间为 From，空闲空间为 To
// 活动对象存储于 From 空间
// GC 开始，标记整理后将活动对象拷贝至 To (整理复制成连续空间)
// From 与 To 交换空间完成释放

// 十三，描述增量标记算法在何时使用及工作原理
// 增量标记算法在老生代对象回收的时候使用，将整个垃圾回收的操作拆分的若干次操作，组合的去完成整个回收，实现垃圾回收和程序执行的交替运行，时间分配上更合理